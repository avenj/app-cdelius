#!perl

use Defaults::Modern;

use App::cdelius;
use App::cdelius::Component;
use App::cdelius::Exception;
use App::cdelius::Types -all;

my $Opts = +{
  help => sub {
  },

  version => sub {
  },

  config  => do {
    $ENV{HOME} ? $ENV{HOME} .'/.cdeliusrc'
      : 'cdeliusrc';
    },

  nocolor => 0,
};

use Getopt::Long;
GetOptions( $Opts,
  qw/
    help
    version

    config=s

    nocolor=i
  /,
);

fun getopts {
  state $argv = hash(%$Opts)->inflate;
  $argv
}


use Term::UI;
use Term::ReadLine;
use Text::ParseWords 'parse_line';
my $termpkg = $ENV{PERL_RL} || try {
  require Term::ReadLine::Perl5;
  'Perl5'
};
$termpkg = $termpkg ? 
    'Term::ReadLine::'.$termpkg 
  : 'Term::ReadLine';
my $term   = $termpkg->new('cdelius');
my $outfh  = $term->OUT || \*STDOUT;
$outfh->autoflush(1);


$outfh->say("Welcome to cdelius!");
$outfh->say(' (readline: ', $term->ReadLine, ')');

unless (-e getopts->config) {
  my $should_create = $term->ask_yn(
    print_me =>
      ">>> No such file: ".getopts->config,
    prompt => 
      "Would you like to initialize a new configuration file?",
    default => 'y',
  );

  if ($should_create) {
    $outfh->print(" ... creating ".getopts->config);

    App::cdelius::Component
      ->build('Backend::Config')
      ->write_new_config(path => getopts->config);

    $outfh->print(" ... done\n");
  } else {
    $outfh->say(">> Continuing with defaults ...");
  }
}


my $_cdel;
fun app
  ( (Object | Undef) $cdel = undef ) {
    $_cdel = $cdel if defined $cdel;
    $_cdel //= App::cdelius->new(
      config_file_path => getopts->config
    )
}

my $_is_dirty;
fun list_is_dirty 
  ( (Bool | Undef) $is_dirty = undef ) {
    $_is_dirty = $is_dirty if defined $is_dirty;
    $_is_dirty //= 0
}


define RET_LIST_DIRTY = -2;


$SIG{INT} = sub { $outfh->say("Caught Ctrl+C") };


PROMPT: while (1) {
  my $prompt = "cd> ";
  my $cmd    = $term->get_reply(
    prompt  => $prompt,
    default => 'help',
  );

  if ($cmd) {
    $term->addhistory($cmd);

    my ($optmap, $parsedcmd) = $term->parse_options($cmd);
    my ($thiscmd, @remain)  = parse_line('\s+', 0, $parsedcmd);

    dispatch( $thiscmd =>
      hash(%$optmap),
      array(@remain)
    ) if $thiscmd;
  }
}



fun dispatch (
  Str      $thiscmd,
  HashObj  $optmap,
  ArrayObj $args
) {
  my $subname = 'cmd_'.$thiscmd;
  my $code;
  unless ($code = __PACKAGE__->can($subname)) {
    $outfh->say("Unknown command $thiscmd, try 'help'");
    return
  }

  my $ret = $code->($optmap, $args);
  list_is_dirty(1) if defined $ret and $ret == RET_LIST_DIRTY;

  $ret
}


fun cmd_q    { goto \&cmd_quit }
fun cmd_quit 
  (HashObj $optmap, ArrayObj $args) {

    $optmap->set(force => 1) if $optmap->get('f');

    if (!$optmap->get('force') && list_is_dirty) {
      my $do_save = $term->ask_yn(
        print_me => ">>> TrackList has unsaved changes",
        prompt => "Save this list before quitting?",
        default => 'y',
      );

      if ($do_save) {
        dispatch( save => hash, array )
      }
    }

    $outfh->say("<< Goodbye!");

    exit 0
}

fun cmd_ls   { goto \&cmd_list }
fun cmd_list 
  (HashObj $optmap, ArrayObj $args) {

    # list
    # list 1 .. 5
    # list --verbose
    $optmap->set(verbose => 1) if $optmap->get('v');

    my ($start, $end);
    if ($args->has_any) {
      my $range = $args->grep(sub { is_Int $_ });
      unless ($range->count == 2) {
        $outfh->say(">> Expected start/end Ints");
        return dispatch( help => hash, array('list') )
      }

      ($start, $end) = $range->all;
    }
  
    my @tracks = app->tracklist->all;
    @tracks = defined $end ? @tracks[$start .. $end] : @tracks;

    for my $track (@tracks) {
      next unless defined $track;
      $outfh->print(
        ' -> ', $track->name, "\n",
        ( 
          $optmap->get('verbose') ? ($track->path, "\n") : ()
        ),
      );
    }

    1
}

fun cmd_add
  (HashObj $optmap, ArrayObj $args) {
    # add $path
    # add $path $index

    unless ($args->has_any) {
      return dispatch( help => hash, array('add') )
    }

    if ($args->count == 1 || $args->count == 2) {
      my $track = try {
        app->tracklist->new_track( path => $args->get(0) );
      } catch {
        $outfh->say(">> Backend reported error: $_");
        undef
      } or return;

      if ($args->count == 2) {
        my $added_to_pos; try {
          $added_to_pos = app->tracklist->add_track(
            track    => $track,
            position => $args->get(1)
          );
        } catch {
          $outfh->say(">> Backend reported error: $_"); 
          undef
        };
        return unless defined $added_to_pos;
        $outfh->say("> Successfully added track ", $added_to_pos);
        return RET_LIST_DIRTY
      }

      my $added_to_pos = try {
        app->tracklist->add_track(
          track => $track
        )
      } catch {
        $outfh->say(">> Backend reported error: $_");
        undef
      };
      return unless defined $added_to_pos;
      $outfh->say("> Successfully added track ", $added_to_pos);
      return RET_LIST_DIRTY
    } else {
      $outfh->say(">> Expected 1 or 2 args but got ".$args->count, "\n");
      return
    }
}

fun cmd_del    { goto \&cmd_delete }
fun cmd_delete
  (HashObj $optmap, ArrayObj $args) {

    # del $index 

    unless ($args->count == 1) {
      $outfh->say(">> Expected 1 arg but got ".$args->count, "\n");
      return dispatch( help => hash, array('del') )
    }

    my $from = $args->head;

    unless ( is_Int $from ) {
      $outfh->say(">> Expected index Int but got $from");
      return
    }

    try {
      app->tracklist->del_track(position => $from);
    } catch {
      $outfh->say(">> Backend reported error: $_");
      undef
    } or return;

    RET_LIST_DIRTY
}

fun cmd_mv   { goto \&cmd_move }
fun cmd_move
  (HashObj $optmap, ArrayObj $args) {

    # move $from $to
    # move $from up
    # move $from down

    unless ($args->count == 2) {
      $outfh->say(">> Expected 2 args but got ".$args->count, "\n");
      return dispatch( help => hash, array('move') )
    }

    my ($from, $to) = $args->all;

    unless ( is_Int $from ) {
      $outfh->say(">> Expected index Int but got $from");
      return
    }

    unless ( $from >= 0 && app->tracklist->get_track($from) ) {
      $outfh->say(">> No such track: $from");
      return
    }

    if ($to eq 'up') {
      my $target_pos = $from - 1;
      $target_pos    = 0 if $target_pos <= 0;
      app->tracklist->move_track(
        from_index => $from,
        to_index   => $target_pos
      )
    } elsif ($to eq 'down') {
      my $target_pos = $from + 1;
      my $last_pos   = array(app->tracklist->all)->count - 1;
      $target_pos    = $last_pos if $target_pos > $last_pos;
      app->tracklist->move_track(
        from_index => $from,
        to_index   => $target_pos,
      )
    } elsif (is_Int $to) {
      try {
        app->tracklist->move_track(
          from_index => $from,
          to_index   => $to
        );
        1
      } catch {
        $outfh->say(">> Backend reported error: $_");
        undef
      } or return;
    } else {
      $outfh->say(">> Unknown parameter $to");
      return dispatch( help => hash, array('move') )
    }

    RET_LIST_DIRTY
}

fun cmd_load 
  (HashObj $optmap, ArrayObj $args) {
  # FIXME syntax:
  #   load $tlist_path
  # FIXME create new app($obj)
  # FIXME warn/prompt if list_is_dirty
}

fun cmd_save
  (HashObj $optmap, ArrayObj $args) {
  # FIXME syntax:
  #   save (prompt if no ->path)
  #   save $path
  # FIXME set list_is_dirty(0)
}

fun cmd_decode
  (HashObj $optmap, ArrayObj $args) {

  $optmap->set(verbose => 1) if $optmap->get('v');
  $optmap->set(force   => 1) if $optmap->get('f');

  my $wavdir = path(
    $optmap->{wavdir}
    // $optmap->{wav_dir}
    // app->config->wav_dir
  );

  if (
    !$optmap->get('force')
    && $wavdir->exists 
    && (my @files = $wavdir->children)
  ) {
    for my $chld (@files) {
      if ($chld =~ /\.wav$/) {
        $outfh->say(
          ">>> Pre-existing tracks and --force not specified\n",
          ">>> ($wavdir)",
        );
        return
      }
    }
  }

  my $total_sz;
  try {
    $total_sz = app->tracklist->decode(
            config  => app->config,
      maybe wav_dir => $wavdir,
      maybe verbose => $optmap->get('verbose'),
    );
    1
  } catch {
    $outfh->say(">>> Backend reported error: $_");
    undef
  } or return;

  $outfh->say("> Decoded to $wavdir, size: $total_sz");
}

fun cmd_burn
  (HashObj $optmap, ArrayObj $args) {
  # FIXME allow --wavdir
  # FIXME allow --dry-run
  # FIXME check for decoded tracks or suggest a decode
  # FIXME prompt to clean up wav_dir
}

fun cmd_h    { goto \&cmd_help }
fun cmd_help
  (HashObj $optmap, ArrayObj $args) {

  # FIXME help items + default
  state $help_for = hash(
    quit => sub { 
      array(
        ' > quit',
        '',
        'Exit the application.',
      )
    },

    list => sub { 
      array(
        ' > list',
        ' > list START .. END',
        '',
        'List tracks on current list.',
        'A range can be specified.',
      )
    },

    add  => sub { 
      array(
        ' > add PATH',
        ' > add PATH POSITION',
        '',
        'Add PATH to the current list.',
        'A target position can be specified.',
      )
    },

    del  => sub { 
      array(
        ' > del POSITION',
        '',
        'Remove the track at POSITION from the current list.',
      ) 
    },

    move => sub { 
      array(
        ' > move POSITION NEW_POSITION',
        ' > move POSITION up',
        ' > move POSITION down',
        '',
        'Move the track at POSITION to NEW_POSITION'
          .'or in a specified direction.',
      )
    },

    load => sub { array() },

    save => sub { array() },
  );

  my $help;
  if ($args->has_any) {
    my ($item, $rest) = $args->head;
    if (my $item = $help_for->get($item)) {
      $help = $item->($rest)->map(sub { $_ . "\n" });
    } else {
      $outfh->say(">> Unknown help item: $item")
    }
  }

  if (defined $help) {
    $outfh->say( $help->all )
  } else {
    $outfh->say(">> Valid help topics:");
    my $topics = $help_for->keys->natatime(4);
    while (my @nxt = $topics->()) {
      $outfh->say(' ', join '  ', @nxt)
    }
  }

  1
}



# vim: ts=2 sw=2 et sts=2 ft=perl
